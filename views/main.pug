extends layout 

block content
  .timeline
    if user
      div
        form#twit-form(action='/post' method='post' enctype='multipart/form-data')
          .input-group
            textarea#twit(name='content' maxlength=140)
          .img-preview
            img#img-preview(src='' style='display: none;' width='250' alt='미리보기')
            input#img-url(type='hidden' name='url')
          div
            label#img-label(for='img') 사진 업로드
            input#img(type='file' accept='image/*')
            button#twit-btn.btn(type='submit') 짹짹
    .twits
      form#hashtag-form(action='/page/1/hashtag')
        input(type='text' name='hashtag' placeholder='태그 검색')
        button.btn 검색
      for twit in twits
        .twit
          input.twit-user-id(type='hidden' value=twit.user.id)
          input.twit-id(type='hidden' value=twit.id)
          .twit-author= twit.user.nick
          -const follow = user && user.Followings.map(f => f.id).includes(twit.user.id);
          //twit.Liker.map(l => l.id는 page 라우터에서 posts로 값을 넘길 때, Liker 배열을 가져옴
          //includes(user.id). 그 배열 안에 현재 로그인한 사용자가 있는지를 like에 담음.
          //user이고, Liker(좋아요)에 있을 경우 좋아요 취소가 가능
          if user && user.id !== twit.user.id && !follow
            button.twit-follow 팔로우하기
          else if user && user.id !== twit.user.id && follow
            button.twit-unfollow 팔로우 끊기
          -const like = user && twit && twit.Liker.map(l => l.id).includes(user.id);  
          if user && !like && user.id !== twit.user.id                                     
            button.like 좋아요
          else if user && like && user.id !== twit.user.id           
            button.unlike 좋아요 취소              
          if user && user.id === twit.user.id
            button.delete 게시글 삭제  
          .twit-content= twit.content
          if twit.img
            .twit-img
              img(src=twit.img alt='섬네일')
    -var curPage = paging.curPage;
    -var page_list_size = paging.page_list_size;
    -var page_size = paging.page_size;
    -var totalPage = paging.totalPage;
    -var curSet = paging.curSet;
    -var startPage = paging.startPage;
    -var endPage = paging.endPage;
    -var totalSet = paging.totalSet;
    -var pageVar = 0;
    if(tag)
      if curSet > 1
        -var prePageUrl = '/page/' + (startPage -1) + '/hashtag?hashtag=' + tag;
        a#my-profile.btn(href=prePageUrl) 이전페이지  
      -for (i = startPage; i <= endPage; i++)
        -pageVar = i;
        -var pageUrl = '/page/' + pageVar + '/hashtag?hashtag=' + tag;
          if curPage == pageVar
            a#my-profile.btn(href=pageUrl) #{pageVar} 
          else if curPage !== pageVar
            a#my-profile.btest(href=pageUrl) #{pageVar}    
      if curSet < totalSet
        -var postPageUrl = '/page/' + (endPage +1) + '/hashtag?hashtag=' + tag;
        a#my-profile.btn(href=postPageUrl) 다음페이지 
    if(!tag)
      if curSet > 1
        -var prePageUrl = '/page/' + (startPage -1) ;
        a#my-profile.btn(href=prePageUrl) 이전페이지  
      -for (i = startPage; i <= endPage; i++)
        -pageVar = i;
        -var pageUrl = '/page/' + pageVar ;
          if curPage == pageVar
            a#my-profile.btn(href=pageUrl) #{pageVar} 
          else if curPage !== pageVar
            a#my-profile.btest(href=pageUrl) #{pageVar}    
      if curSet < totalSet
        -var postPageUrl = '/page/' + (endPage +1) ;
        a#my-profile.btn(href=postPageUrl) 다음페이지                   
  script.
    if (document.getElementById('img')) {
      document.getElementById('img').addEventListener('change', function (e) {
        var formData = new FormData();
        console.log(this, this.files);
        formData.append('img', this.files[0]);
        var xhr = new XMLHttpRequest();
        xhr.onload = function () {
          if (xhr.status === 200) {
            var url = JSON.parse(xhr.responseText).url;
            document.getElementById('img-url').value = url;
            document.getElementById('img-preview').src = url;
            document.getElementById('img-preview').style.display = 'inline';
          } else {
            console.error(xhr.responseText);
          }
        };
        xhr.open('POST', '/post/img');
        xhr.send(formData);
      });
    }
    [].forEach.call(document.querySelectorAll('.twit-follow'), function (tag) {
      tag.addEventListener('click', function () {
        var isLoggedIn = document.querySelector('#my-id');
        if (isLoggedIn) {
          var userId = tag.parentNode.querySelector('.twit-user-id').value;
          var myId = isLoggedIn.value;
          if (userId !== myId) {
            if (confirm('팔로잉하시겠습니까?')) {
              var xhr = new XMLHttpRequest();
              xhr.onload = function () {
                if (xhr.status === 200) {
                  location.reload();
                } else {
                  console.error(xhr.responseText);
                }
              };
              xhr.open('POST', '/user/' + userId + '/follow');
              xhr.send();
            }
          }
        }
      });
    });
    [].forEach.call(document.querySelectorAll('.twit-unfollow'), function (tag) {
      tag.addEventListener('click', function () {
        var isLoggedIn = document.querySelector('#my-id');
        if (isLoggedIn) {
          var userId = tag.parentNode.querySelector('.twit-user-id').value;
          var myId = isLoggedIn.value;
          if (userId !== myId) {
            if (confirm('팔로잉을 끊으시겠습니까?')) {
              var xhr = new XMLHttpRequest();
              xhr.onload = function () {
                if (xhr.status === 200) {
                  location.reload();
                } else {
                  console.error(xhr.responseText);
                }
              };
              xhr.open('POST', '/user/' + userId + '/unfollow');
              xhr.send();
            }
          }
        }
      });
    });
    [].forEach.call(document.querySelectorAll('.like'), function (tag) {
      tag.addEventListener('click', function () {
        var isLoggedIn = document.querySelector('#my-id');
        var twitId = tag.parentNode.querySelector('.twit-id').value;
        if (isLoggedIn) {
          var xhr = new XMLHttpRequest();
          xhr.onload = function () {
            if (xhr.status === 200) {
              location.reload();
            } else {
              console.error(xhr.responseText);
            }
          };
          xhr.open('POST', '/post/' + twitId + '/like');
          xhr.send();
        }
      });
    });
    [].forEach.call(document.querySelectorAll('.unlike'), function (tag) {
      tag.addEventListener('click', function () {
        var isLoggedIn = document.querySelector('#my-id');
        var twitId = tag.parentNode.querySelector('.twit-id').value;
        if (isLoggedIn) {
          var xhr = new XMLHttpRequest();
          xhr.onload = function () {
            if (xhr.status === 200) {
              location.reload();
            } else {
              console.error(xhr.responseText);
            }
          };
          xhr.open('DELETE', '/post/' + twitId + '/unlike');
          xhr.send();
        }
      });
    });
    [].forEach.call(document.querySelectorAll('.delete'), function (tag) {
      tag.addEventListener('click', function () {
        var isLoggedIn = document.querySelector('#my-id');
        var twitId = tag.parentNode.querySelector('.twit-id').value;
        if (isLoggedIn) {
          if (confirm('게시글을 삭제하시겠습니까?')) {
            var xhr = new XMLHttpRequest();
            xhr.onload = function () {
              if (xhr.status === 200) {
                location.reload();
              } else {
                console.error(xhr.responseText);
              }
            };
            xhr.open('DELETE', '/post/' + twitId);
            xhr.send();
          }
        }
      });
    });   
                  
